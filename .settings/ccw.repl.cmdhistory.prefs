cmdhistory=["(ns basic-combat-ai.main-screen)" "game" "(use 'basic-combat-ai.main-screen \:reload)" "(basic-combat-ai.desktop-launcher/reset)" "(ns basic-combat-ai.main-screen)" "(defn tt [{ecs \:ecs \:as game}]\\n  (println \\"fooka you\\"))" "game" "(use 'basic-combat-ai.main-screen \:reload)" "(basic-combat-ai.desktop-launcher/reset)" "game" "(ns basic-combat-ai.main-screen)" "game" "(ns basic-combat-ai.ecs)" "(conj [] 1)" "(defn tt [a]\\n  a)" "(\= tt (fn [a] a))" "(\= tt tt)" "(\= (fn [a] a) (fn [a] a))" "(defn add-system [{ecs \:ecs {existing-systems \:systems} \:as game} new-system]\\n  (assoc-in game [\:ecs \:systems] (conj existing-systems new-system)))" "(defn add-system [{ecs \:ecs {existing-systems \:systems} \:as game}]\\n  (assoc-in game [\:ecs \:systems] (conj existing-systems 1)))" "(defn add-system [{ecs \:ecs {existing-systems \:systems}}]\\n  (assoc-in game [\:ecs \:systems] (conj existing-systems 1)))" "(defn add-system [{ecs \:ecs {existing-systems \:systems}}]\\n  (assoc-in {} [\:ecs \:systems] (conj existing-systems 1)))" "(defn add-system [{{existing-systems \:systems} \:ecs}]\\n  (assoc-in {} [\:ecs \:systems] (conj existing-systems 1)))" "(defn add-system [{{existing-systems \:systems} \:ecs \:as game}]\\n  (assoc-in {} [\:ecs \:systems] (conj existing-systems 1)))" "(defn add-system [{{existing-systems \:systems} \:ecs \:as game} new-system]\\n  (assoc-in game [\:ecs \:systems] (conj existing-systems new-system)))" "(add-system {\:ecs {\:systems []}} tt)" "(defn update-ecs [{{entities \:entities systems \:systems} \:ecs \:as game}]\\n  (assoc-in game [\:ecs \:entities] (loop [syss systems\\n                                        ents entities]\\n                                   (if (empty? syss)\\n                                     ents\\n                                     (recur (rest syss) ((first syss) game))))))" "tt" "(def g {\:ecs {\:entities [] \:systems []}})" "(def tt [{{ents \:entities} \:ecs}]\\n  ents)" "(defn tt [{{ents \:entities} \:ecs}]\\n  ents)" "g" "(def g (add-system g tt))" "g" "(update-ecs g)" "(defn update-ecs [{{entities \:entities systems \:systems} \:ecs \:as game}]\\r\\n     (assoc-in game [\:ecs \:entities] (loop [syss systems\\r\\n                                           ents entities]\\r\\n                                      (if (empty? syss)\\r\\n                                        ents\\r\\n                                        (recur (rest syss) ((first syss) (assoc-in game [\:ecs \:entities] ents)))))))" "tt" "(defn tt [{{ents \:entities} \:ecs}]\\r\\n  (map (fn [e] (inc (\:id e)) ents)))" "g" "(def g (assoc-in g [\:ecs \:entities] [{\:id 0} {\:id 1} {\:id 2}]))" "g" "(update-ecs g)" "tt" "(def g (assoc-in g [\:ecs \:systems] [tt]))" "g" "(update-ecs g)" "g" "(defn tt [{{ents \:entities} \:ecs}]\\r\\n     (doall (map (fn [e] (inc (\:id e)) ents))))" "(def g (assoc-in g [\:ecs \:systems] [tt]))" "g" "(update-ecs g)" "(tt g)" "(defn tt [{{ents \:entities} \:ecs}]\\r\\n  (map (fn [e] (inc (\:id e)) ents)))" "(tt g)" "(map (fn [e] (inc (\:id e)) (get-in g [\:ecs \:entities])))" "(map inc [1 2 3])" "(map (fn [e] (inc (\:id e)) (get-in g [\:ecs \:entities])))" "(do (map (fn [e] (inc (\:id e)) (get-in g [\:ecs \:entities]))))" "((map (fn [e] (inc (\:id e)) (get-in g [\:ecs \:entities]))))" "(map (fn [e] (inc (\:id e))) (get-in g [\:ecs \:entities]))" "(defn tt [{{ents \:entities} \:ecs}]\\r\\n  (map (fn [e] (inc (\:id e))) ents))" "(def g (assoc-in g [\:ecs \:systems] [tt]))" "g" "(update-ecs g)" "(defn tt [{{ents \:entities} \:ecs}]\\r\\n     (mapv (fn [e] (assoc e \:id (inc (\:id e))) ents)))" "(def g (assoc-in g [\:ecs \:systems] [tt]))" "g" "(update-ecs g)" "(defn tt [{{ents \:entities} \:ecs}]\\r\\n        (mapv (fn [e] (assoc e \:id (inc (\:id e)))) ents))" "(def g (assoc-in g [\:ecs \:systems] [tt]))" "(update-ecs g)" "g" "(defn tt2 [{{ents \:entities} \:ecs}]\\r\\n        (mapv (fn [e] (assoc e \:id (inc (\:id e)))) ents))" "(def g (assoc-in g [\:ecs \:systems] [tt tt2]))" "g" "(update-ecs g)" "(def g (assoc-in g [\:ecs \:systems] []))" "g" "(add-system g tt)" "(into [1 2 3] [4 5 6])" "(conj [1 2 3] [4 5 6])" "(into [1 2 3] 4)" "(into [1 2 3] '(4 5 6))" "(defn add-system \\r\\n  [{{existing-systems \:systems} \:ecs \:as game} new-system]\\r\\n    (assoc-in game [\:ecs \:systems] (conj existing-systems new-system))\\r\\n  [{{existing-systems \:systems} \:ecs \:as game} new-systems]\\r\\n    (assoc-in game [\:ecs \:systems] (into existing-systems new-system)))" "(defn add-system \\r\\n  ([{{existing-systems \:systems} \:ecs \:as game} new-system]\\r\\n    (assoc-in game [\:ecs \:systems] (conj existing-systems new-system)))\\r\\n  ([{{existing-systems \:systems} \:ecs \:as game} new-systems]\\r\\n    (assoc-in game [\:ecs \:systems] (into existing-systems new-system))))" "(def a \\n  ([b] b)\\n  ([c d] d))" "(defn a \\n  ([b] b)\\n  ([c d] d))" "(defn add-system \\r\\n  ([{{existing-systems \:systems} \:ecs \:as game} new-system]\\r\\n    (assoc-in game [\:ecs \:systems] (conj existing-systems new-system)))\\r\\n  ([{{existing-systems \:systems} \:ecs \:as game} new-systems]\\r\\n    (assoc-in game [\:ecs \:systems] (into existing-systems new-system))))" "(defn add-system \\r\\n  ([{{existing-systems \:systems} \:ecs \:as game} new-system]\\r\\n    (assoc-in game [\:ecs \:systems] (conj existing-systems new-system)))\\r\\n  ([{{existing-systems \:systems} \:ecs \:as game} new-systems]\\r\\n    (assoc-in game [\:ecs \:systems] (into existing-systems new-systems))))" "(defn add-system [{{existing-systems \:systems} \:ecs \:as game} new-systems]\\n  (if (vector? new-systems)\\n    (let [ass-game (partial assoc-in game [\:ecs \:systems])\\n    (assoc-in game [\:ecs \:systems] (into existing-systems new-system))\\r\\n    (assoc-in game [\:ecs \:systems] (conj existing-systems new-system))))" "(partial assoc-in game [\:ecs \:systems])" "(partial assoc-in {} [\:ecs \:systems])" "(defn add-system [{{existing-systems \:systems} \:ecs \:as game} new-systems]\\n  (let [ass-game (partial assoc-in game [\:ecs \:systems])]\\n    (if (vector? new-systems)\\n      (ass-game (into existing-systems new-system))\\r\\n      (ass-game (conj existing-systems new-system)))))" "(defn add-system [{{existing-systems \:systems} \:ecs \:as game} new-systems]\\n  (let [ass-game (partial assoc-in game [\:ecs \:systems])]\\n    (if (vector? new-systems)\\n      (ass-game (into existing-systems new-systems))\\r\\n      (ass-game (conj existing-systems new-systems)))))" "g" "(add-system g tt)" "(add-system g [tt tt2])" "(defn add-entity [{{ents \:entities} \:as game} new-entity]\\n  (assoc-in game [\:ecs \:entities] (conj ents new-entity)))" "(defn add-entity [{{ents \:entities} \:ecs \:as game} new-entity]\\n  (assoc-in game [\:ecs \:entities] (conj ents new-entity)))" "(add-entity g {\:id 99})" "g" "(def g (assoc-in g [\:ecs \:entities] []))" "(use 'basic-combat-ai.ecs \:reload)" "g" "(defn render [{{ents \:entities} \:ecs batch \:batch}]\\n  ents)" "(defn render [{{ents \:entities} \:ecs batch \:batch}]\\n  (let [qualifying-ents (filterv \#(and (\:renderable %) (\:transform %)) ents)\\n        other-ents (filterv \#(not (and (\:renderable %) (\:transform %))) ents)]\\n    (.begin batch)\\n    (doall \\n      (map \#(let [texture-region (\:renderable %)\\n                  x (float (get-in % [\:transform \:x]))\\n                  y (float (get-in % [\:transform \:y]))\\n                  width (float (.getWidth (.getTexture (\:renderable %))))\\n                  height (float (.getHeight (.getTexture (\:renderable %))))]\\n              (.draw texture-region x y width height)) \\n           qualifying-ents))\\n    (.end batch))\\n  ents)" "(use 'basic-combat-ai.systems \:reload)" "(use 'basic-combat-ai.main-screen \:reload)" "(basic-combat-ai.desktop-launcher/reset)" "game" "(ns basic-combat-ai.systems)" "(use 'basic-combat-ai.systems \:reload)" "(defn init [game]\\n  (ecs/add-system game render))" "(init (ecs/g))" "get" "ecs/g" "(init ecs/g)" "(ns basic-combat-ai.entities)" "(use 'basic-combat.ai.entities \:reload)" "(use 'basic-combat-ai.entities \:reload)" "(defn pistoleer [{tex-cache \:tex-cache}]\\n  (assoc {}\\n         \:transform (comps/transform 50 50 0)\\n         \:renderable (\:pistol-idle tex-cache)))" "(defn init [game]\\n  (ecs/add-entity game (pistoleer (\:tex-cache game))))" "(ns basic-combat-ai.main-screen)" "(use 'basic-combat-ai.main-screen \:reload)" "(defn init-game []\\r\\n  (let [tex-cache (init-tex-cache)]\\r\\n    (-> (assoc {}\\r\\n               \:batch (SpriteBatch.)\\r\\n               \:tex-cache tex-cache\\r\\n               \:inputs {})\\r\\n      (ecs/init-ecs)\\r\\n      (ent/init)\\n      (sys/init))))" "(def r []\\n  (use 'basic-combat-ai.main-screen \:reload)\\n  (basic-combat-ai.desktop-launcher/reset))" "(defn r []\\n  (use 'basic-combat-ai.main-screen \:reload)\\n  (basic-combat-ai.desktop-launcher/reset))" "r" "(r)" "(use 'basic-combat-ai.ecs \:reload)" "(use 'basic-combat-ai.systems \:reload)" "(use 'basic-combat-ai.desktop-launcher \:reload)" "(use 'basic-combat-ai.desktop-launcher \:reload-all)" "(ns basic-combat-ai.main-screen)" "game" "(ns basic-combat-ai.main-screen)" "game" "(basic-combat-ai.desktop-launcher/run-on-main-thread (fn [] (.findRegion (TextureAtlas. \\"s.pack\\") \\"pistol idle\\")))" "(.findRegion (TextureAtlas. \\"s.pack\\") \\"pistol idle\\")" "(use 'basic-combat-ai.main-screen \:reload)" "(basic-combat-ai.desktop-launcher/reset)" "(ns basic-combat-ai.main-screen)" "game" "(ns basic-combat-ai.main-screen)" "game" "(\:tex-cache game)" "(\:pistol-idle (\:tex-cache game))" "(.getWitdh (\:pistol-idle (\:tex-cache game)))" "(.getWidth (\:pistol-idle (\:tex-cache game)))" "(.getWidth (cast TextureRegion (\:pistol-idle (\:tex-cache game))))" "(cast TextureRegion (\:pistol-idle (\:tex-cache game)))" "(cast TextureRegion.class (\:pistol-idle (\:tex-cache game)))" "(.getWidth ^TextureRegion (\:pistol-idle (\:tex-cache game)))" "(.getRegionWidth (\:pistol-idle (\:tex-cache game)))" "(.getRegionHeight (\:pistol-idle (\:tex-cache game)))" "(.getWidth (.getTexture (\:pistol-idle (\:tex-cache game))))" "(.getHeight (.getTexture (\:pistol-idle (\:tex-cache game))))" "(use 'basic-combat-ai.systems \:reload)" "(reset)" "(use clojure.tools.namespace.repl)" "(require 'basic-combat-ai.desktop-launcher \:reload-all)" "(ns basic-combat-ai.main-screen)" "game" "(def r []\\n  (require 'basic-combat-ai.desktop-launcher \:reload-all)\\n  (basic-combat-ai.desktop-launcher/reset))" "(defn r []\\n  (require 'basic-combat-ai.desktop-launcher \:reload-all)\\n  (basic-combat-ai.desktop-launcher/reset))" "r" "(defn r []\\r\\n  (doall (require 'basic-combat-ai.desktop-launcher \:reload-all)\\r\\n     (basic-combat-ai.desktop-launcher/reset)))" "r" "(defn r []\\r\\n     (require 'basic-combat-ai.desktop-launcher \:reload-all)\\r\\n     (basic-combat-ai.desktop-launcher/reset))" "(r)" "game" "(basic-combat-ai.desktop-launcher/reset)" "game" "(init-game)" "(ns basic-combat-ai.main-screen)" "game" "\\r\\n        (require 'basic-combat-ai.desktop-launcher \:reload-all)\\r\\n        (basic-combat-ai.desktop-launcher/reset)" "game" "(basic-combat-ai.desktop-launcher/reset)" "game" "\#'basic-combat-ai.main-screen/screen" "(ns basic-combat-ai.main-screen)" "game" "(ns basic-combat-ai.main-screen)" "game" "(\:transform (first (\:entities (\:ecs game))))" "(require '[clojure.tools.namespace.repl \:refer [refresh]])" "game" "(require 'basic-combat-ai.main-screen \:reload-all)" "game" "(basic-combat-ai.desktop-launcher/reset)" "game" "(def r []\\n  (require 'basic-combat-ai.main-screen \:reload-all)\\n  (basic-combat-ai.desktop-launcher/reset))" "(defn r []\\n  (require 'basic-combat-ai.main-screen \:reload-all)\\n  (basic-combat-ai.desktop-launcher/reset))" "game" "(ecs/add-system game (sys/render game))" "(r)" "game" "(update-game\! \#(assoc-in % [\:ecs \:entities 0 \:transform \:rot] 45))" "game" "(update-game\! \#(assoc-in % [\:ecs \:entities 0 \:transform \:rotation] 45))" "(update-game\! \#(assoc-in % [\:ecs \:entities 0 \:transform \:rotation] -45))" "(update-game\! \#(assoc-in % [\:ecs \:entities 0 \:transform \:rotation] 0))" "(boolean [])" "(boolean [nil])" "(some \#{nil} [nil])" "(\#{nil} nil)" "(\#{nil} \\"test\\")" "(\#{\\"test\\"} \\"test\\")" "({\:pistol-firing [{\:texture \\"0\\" \:duration 0.0} {\:texture \\"1\\" \:duration 0.0}]} \:pistol-firing)" "({\:pistol-firing [{\:texture \\"0\\" \:duration 0.0} {\:texture \\"1\\" \:duration 0.0}]} [\:pistol-firing 0])" "(keys {\:pistol-firing [{\:texture \\"0\\" \:duration 0.0} {\:texture \\"1\\" \:duration 0.0}]})" "(key {\:pistol-firing [{\:texture \\"0\\" \:duration 0.0} {\:texture \\"1\\" \:duration 0.0}]})" "(key \\"tesT\\" )" "(defn animation [frames loop?]\\r\\n  \\"frames sample\: {\:pistol-fire [{\:texture abc \:duration 0.1} {\:texture def \:duration 1.3}]\\r\\n                   \:pistol-idle [{\:texture aaa \:duration 0.5}]}\\"\\r\\n  (assoc {}\\r\\n         \:current-frame -1\\r\\n         \:current-duration 0.0\\r\\n         \:loop? loop?\\r\\n         \:frames frames))" "(defn animation [frames loop?]\\r\\n  \\"frames sample\: {\:pistol-fire [{\:texture abc \:duration 0.1} {\:texture def \:duration 1.3}]\\r\\n                   \:pistol-idle [{\:texture aaa \:duration 0.5}]}\\"\\n  {\:pre [(map? frames) \\n         (map \\n           (fn [k] (map \\n                     (fn [f] (and (\:texture f) (\:duration f))) \\n                     (k frames))) \\n           (keys frames))\\n         ]}\\r\\n  (assoc {}\\r\\n         \:current-frame -1\\r\\n         \:current-duration 0.0\\r\\n         \:loop? loop?\\r\\n         \:frames frames))" "(let [frames {\:pistol-fire [{\:texture abc \:duration 0.1} {\:texture def \:duration 1.3}]\\r\\n              \:pistol-idle [{\:texture aaa \:duration 0.5}]}]\\n  (map \\r\\n    (fn [k] (map \\r\\n              (fn [f] (and (\:texture f) (\:duration f))) \\r\\n              (k frames))) \\r\\n    (keys frames)))" "(let [frames {\:pistol-fire [{\:texture \\"abc\\" \:duration 0.1} \\n                            {\:texture \\"def\\" \:duration 1.3}]\\r\\n              \:pistol-idle [{\:texture \\"aaa\\" \:duration 0.5}]}]\\n  (map \\r\\n    (fn [k] (map \\r\\n              (fn [f] (and (\:texture f) (\:duration f))) \\r\\n              (k frames))) \\r\\n    (keys frames)))" "(let [frames {\:pistol-fire [{\:texture \\"abc\\" \:duration 0.1} \\n                            {\:texture \\"def\\" \:duration 1.3}]\\r\\n              \:pistol-idle [{\:texture \\"aaa\\" \:duration 0.5}]}]\\n  (map \\r\\n    (fn [k] (k frames))\\r\\n    (keys frames)))" "(let [frames {\:pistol-fire [{\:texture \\"abc\\" \:duration 0.1} \\r\\n                               {\:texture \\"def\\" \:duration 1.3}]\\r\\n                 \:pistol-idle [{\:texture \\"aaa\\" \:duration 0.5}]}]\\r\\n     (map \\r\\n       (fn [k] (map \\r\\n                 (fn [fs] \\n                   (map \\n                     (fn [f] (and (\:texture f) (\:duration f))) \\n                     fs))\\n                 (k frames)))\\n       (keys frames)))" "(boolean '(((nil nil) (nil nil)) ((nil nil))))" "(let [frames {\:pistol-fire [{\:texture \\"abc\\" \:duration 0.1} \\r\\n                                  {\:texture \\"def\\" \:duration 1.3}]\\r\\n                    \:pistol-idle [{\:texture \\"aaa\\" \:duration 0.5}]}]\\r\\n        (map \\r\\n          (fn [k] (map \\r\\n                    (fn [fs] \\r\\n                      (map \\r\\n                        (fn [f] f) \\r\\n                        fs))\\r\\n                    (k frames)))\\r\\n          (keys frames)))" "(let [frames {\:pistol-fire [{\:texture \\"abc\\" \:duration 0.1} \\r\\n                                  {\:texture \\"def\\" \:duration 1.3}]\\r\\n                    \:pistol-idle [{\:texture \\"aaa\\" \:duration 0.5}]}]\\r\\n        (map \\r\\n          (fn [k] (map \\r\\n                    (fn [fs] \\r\\n                      fs)\\r\\n                    (k frames)))\\r\\n          (keys frames)))" "(let [frames {\:pistol-fire [{\:texture \\"abc\\" \:duration 0.1} \\r\\n                                  {\:texture \\"def\\" \:duration 1.3}]\\r\\n                    \:pistol-idle [{\:texture \\"aaa\\" \:duration 0.5}]}]\\r\\n        (map \\r\\n          (fn [k] (map \\r\\n                    (fn [fs] \\r\\n                      (and (\:texture fs) (\:duration fs)))\\r\\n                    (k frames)))\\r\\n          (keys frames)))" "(let [frames {\:pistol-fire [{\:texture \\"abc\\" \:duration 0.1} \\r\\n                                  {\:texture \\"def\\" \:duration 1.3}]\\r\\n                    \:pistol-idle [{\:texture \\"aaa\\" \:duration 0.5}]}]\\r\\n        (map \\r\\n          (fn [k] (map \\r\\n                    (fn [fs] \\r\\n                      fs)\\r\\n                    (k frames)))\\r\\n          (keys frames)))" "(let [frames {\:pistol-fire [{\:texture \\"abc\\" \:duration 0.1} \\r\\n                                  {\:texture \\"def\\" \:duration 1.3}]\\r\\n                    \:pistol-idle [{\:texture \\"aaa\\" \:duration 0.5}]}]\\r\\n        (map \\r\\n          (fn [k] (map \\r\\n                    (fn [fs] \\r\\n                      (\:texture fs))\\r\\n                    (k frames)))\\r\\n          (keys frames)))" "(let [frames {\:pistol-fire [{\:texture \\"abc\\" \:duration 0.1} \\r\\n                                  {\:texture \\"def\\" \:duration 1.3}]\\r\\n                    \:pistol-idle [{\:texture \\"aaa\\" \:duration 0.5}]}]\\r\\n        (map \\r\\n          (fn [k] (map \\r\\n                    (fn [fs] \\r\\n                      (and (\:texture fs) true))\\r\\n                    (k frames)))\\r\\n          (keys frames)))" "(let [frames {\:pistol-fire [{\:texture \\"abc\\" \:duration 0.1} \\r\\n                                  {\:texture \\"def\\" \:duration 1.3}]\\r\\n                    \:pistol-idle [{\:texture \\"aaa\\" \:duration 0.5}]}]\\r\\n        (map \\r\\n          (fn [k] (map \\r\\n                    (fn [fs] \\r\\n                      (and (\:duration fs) true))\\r\\n                    (k frames)))\\r\\n          (keys frames)))" "(let [frames {\:pistol-fire [{\:texture \\"abc\\" \:duration 0.1} \\r\\n                                  {\:texture \\"def\\" \:duration 1.3}]\\r\\n                    \:pistol-idle [{\:texture \\"aaa\\" \:duration 0.5}]}]\\r\\n        (map \\r\\n          (fn [k] (map \\r\\n                    (fn [fs] \\r\\n                      (and (\:duration fs) (\:texture fs)))\\r\\n                    (k frames)))\\r\\n          (keys frames)))" "(let [frames {\:pistol-fire [{\:texture \\"abc\\" \:duration 0.1} \\r\\n                                  {\:texture \\"def\\" \:duration 1.3}]\\r\\n                    \:pistol-idle [{\:texture \\"aaa\\" \:duration 0.5}]}]\\r\\n        (map \\r\\n          (fn [k] (map \\r\\n                    (fn [fs] \\r\\n                      (and (\:duration fs)))\\r\\n                    (k frames)))\\r\\n          (keys frames)))" "(and (\:duration {\:duration 0.5}))" "(let [frames {\:pistol-fire [{\:texture \\"abc\\" \:duration 0.1} \\r\\n                                  {\:texture \\"def\\" \:duration 1.3}]\\r\\n                    \:pistol-idle [{\:texture \\"aaa\\" \:duration 0.5}]}]\\r\\n        (map \\r\\n          (fn [k] (map \\r\\n                    (fn [fs] \\r\\n                      (and (\:duration fs) (\:texture fs)))\\r\\n                    (k frames)))\\r\\n          (keys frames)))" "(vals ((\\"abc\\" \\"def\\") (\\"aaa\\")))" "(vals '((\\"abc\\" \\"def\\") (\\"aaa\\")))" "(identity x)" "(identity 1)" "(into [] [1 2 [3 4]])" "(let [frames {\:pistol-fire [{\:texture \\"abc\\" \:duration 0.1} \\r\\n                                  {\:texture \\"def\\" \:duration 1.3}]\\r\\n                    \:pistol-idle [{\:texture \\"aaa\\" \:duration 0.5}]}]\\r\\n        (map \\r\\n          (fn [k] (map \\r\\n                    (fn [fs] \\r\\n                      (and (\:duration fs) (\:texture fs)))\\r\\n                    (k frames)))\\r\\n          (keys frames)))" "(ns basic-combat-ai.components)" "(frame \\"butt sex\\" 0.4)" "(partition 2 [\\"one\\" 1 \\"two\\" 2 \\"three\\" 3])" "(partition 2 [\:pistol-fire (frame \\"t1\\" 0.1) (frame \\"t2\\" 1.5)])" "(partition 2 [1])" "(let [args '(\:pistol-fire [(frame \\"1\\" 1) (frame \\"2\\" 2)]\\n             \:pistol-gunna [(frame \\"3\\" 3) (frame \\"4\\" 4)]             \\n             \:pistol-stunna (frame \\"5\\" 5))]\\n  (partition 2 args))" "(let [args '(\:pistol-fire [(frame \\"1\\" 1) (frame \\"2\\" 2)]\\n             \:pistol-gunna [(frame \\"3\\" 3) (frame \\"4\\" 4)]             \\n             \:pistol-stunna (frame \\"5\\" 5))]\\n  (vector (partition 2 args)))" "(let [args '(\:pistol-fire [(frame \\"1\\" 1) (frame \\"2\\" 2)]\\n             \:pistol-gunna [(frame \\"3\\" 3) (frame \\"4\\" 4)]             \\n             \:pistol-stunna (frame \\"5\\" 5))]\\n  (partition 2 args))" "(conj {\:hi \\"1\\"} {\:test \\"test\\"})" "(conj {\:hi \\"1\\"} {\:hi \\"test\\"})" "(merge {\:hi \\"1\\"} {\:hi \\"test\\"})" "(merge {\:hi \\"1\\"} {\:test \\"test\\"})" "(let [args '(\:pistol-fire [(frame \\"1\\" 1) (frame \\"2\\" 2)]\\n             \:pistol-gunna [(frame \\"3\\" 3) (frame \\"4\\" 4)]             \\n             \:pistol-stunna (frame \\"5\\" 5))]\\n  (map (fn [name-frame]\\n         {(first name-frame) (second name-frame)})\\n         (partition 2 args)))" "(let [args '(\:pistol-fire [(frame \\"1\\" 1) (frame \\"2\\" 2)]\\n             \:pistol-gunna [(frame \\"3\\" 3) (frame \\"4\\" 4)]             \\n             \:pistol-stunna (frame \\"5\\" 5))]\\n  (map (fn [name-frame]\\n         {(first name-frame) (second name-frame)})\\n         (doall (partition 2 args))))" "(let [args '(\:pistol-fire [(frame \\"1\\" 1) (frame \\"2\\" 2)]\\n             \:pistol-gunna [(frame \\"3\\" 3) (frame \\"4\\" 4)]             \\n             \:pistol-stunna (frame \\"5\\" 5))]\\n  (map (fn [name-frame]\\n         {(first name-frame) (second name-frame)})\\n         (partition 2 args)))" "(let [args [\:pistol-fire [(frame \\"1\\" 1) (frame \\"2\\" 2)]\\n             \:pistol-gunna [(frame \\"3\\" 3) (frame \\"4\\" 4)]             \\n             \:pistol-stunna (frame \\"5\\" 5)]]\\n  (map (fn [name-frame]\\n         {(first name-frame) (second name-frame)})\\n         (partition 2 args)))" "(let [args '(\:pistol-fire ['(frame \\"1\\" 1) (frame \\"2\\" 2)]\\n             \:pistol-gunna [(frame \\"3\\" 3) (frame \\"4\\" 4)]             \\n             \:pistol-stunna (frame \\"5\\" 5))]\\n  (map (fn [name-frame]\\n         {(first name-frame) (second name-frame)})\\n         (partition 2 args)))" "(let [args '(\:pistol-fire [\#(frame \\"1\\" 1) (frame \\"2\\" 2)]\\n             \:pistol-gunna [(frame \\"3\\" 3) (frame \\"4\\" 4)]             \\n             \:pistol-stunna (frame \\"5\\" 5))]\\n  (map (fn [name-frame]\\n         {(first name-frame) (second name-frame)})\\n         (partition 2 args)))" "(let [args '(\:pistol-fire [(frame \\"1\\" 1) (frame \\"2\\" 2)]\\n             \:pistol-gunna [(frame \\"3\\" 3) (frame \\"4\\" 4)]             \\n             \:pistol-stunna (frame \\"5\\" 5))]\\n  (map (fn [name-frame]\\n         {(first name-frame) (eval (second name-frame))})\\n         (partition 2 args)))" "'((+ 1 2))" "[(+ 1 2)]" "(let [args (eval '(\:pistol-fire [(frame \\"1\\" 1) (frame \\"2\\" 2)]\\r\\n             \:pistol-gunna [(frame \\"3\\" 3) (frame \\"4\\" 4)]             \\r\\n             \:pistol-stunna (frame \\"5\\" 5)))]\\r\\n  (map (fn [name-frame]\\r\\n         {(first name-frame) (eval (second name-frame))})\\r\\n         (partition 2 args)))" "(let [args '(\:pistol-fire [(frame \\"1\\" 1) (frame \\"2\\" 2)]\\n             \:pistol-gunna [(frame \\"3\\" 3) (frame \\"4\\" 4)]             \\n             \:pistol-stunna (frame \\"5\\" 5))]\\n  (map (fn [name-frame]\\n         {(first name-frame) (eval (second name-frame))})\\n         (partition 2 args)))" "(eval '(+ 1 2))" "(let [literal-args '(\:pistol-fire [(frame \\"1\\" 1) (frame \\"2\\" 2)]\\r\\n                     \:pistol-gunna [(frame \\"3\\" 3) (frame \\"4\\" 4)]             \\r\\n                     \:pistol-stunna (frame \\"5\\" 5))\\n      args (eval literal-args)]\\r\\n  (map (fn [name-frame]\\r\\n         {(first name-frame) (second name-frame)})\\r\\n         (partition 2 args)))" "(let [args [\:pistol-fire [(frame \\"1\\" 1) (frame \\"2\\" 2)]\\r\\n                     \:pistol-gunna [(frame \\"3\\" 3) (frame \\"4\\" 4)]             \\r\\n                     \:pistol-stunna (frame \\"5\\" 5)]]\\r\\n  (map (fn [name-frame]\\r\\n         {(first name-frame) (second name-frame)})\\r\\n         (partition 2 args)))" "(let [args [\:pistol-fire [(frame \\"1\\" 1) (frame \\"2\\" 2)]\\r\\n                     \:pistol-gunna [(frame \\"3\\" 3) (frame \\"4\\" 4)]             \\r\\n                     \:pistol-stunna (frame \\"5\\" 5)]\\n      mapped (map (fn [name-frame]\\r\\n                    {(first name-frame) (second name-frame)})\\r\\n                  (partition 2 args))]\\n  \\r\\n  )" "(let [args [\:pistol-fire [(frame \\"1\\" 1) (frame \\"2\\" 2)]\\r\\n                     \:pistol-gunna [(frame \\"3\\" 3) (frame \\"4\\" 4)]             \\r\\n                     \:pistol-stunna (frame \\"5\\" 5)]\\n      mapped (map (fn [name-frame]\\r\\n                    {(first name-frame) (second name-frame)})\\r\\n                  (partition 2 args))]\\n  (reduce conj mapped))" "(let [args [\:pistol-fire [(frame \\"1\\" 1) (frame \\"2\\" 2)]\\r\\n                     \:pistol-gunna [(frame \\"3\\" 3) (frame \\"4\\" 4)]             \\r\\n                     \:pistol-stunna (frame \\"5\\" 5)]\\n      mapped (map (fn [name-frame]\\r\\n                    {(first name-frame) (second name-frame)})\\r\\n                  (partition 2 args))]\\n  (vector (reduce conj mapped)))" "(defn frames [& args]\\n  (let [mapped (map (fn [name-frame]\\r\\n                      {(first name-frame) (second name-frame)})\\r\\n                    (partition 2 args))]\\r\\n  (vector (reduce conj mapped))))" "(frames \:pistol-fire [(frame \\"1\\" 1) (frame \\"2\\" 2)])" "(defn frames [& args]\\r\\n     (let [mapped (map (fn [name-frame]\\r\\n                         {(first name-frame) (second name-frame)})\\r\\n                       (partition 2 args))]\\r\\n     (reduce conj mapped)))" "(frames \:pistol-fire [(frame \\"1\\" 1) (frame \\"2\\" 2)])" "(frames \:pistol-fire [(frame \\"1\\" 1) (frame \\"2\\" 2)]\\n        \:pistol-gunna [(frame \\"3\\" 3) (frame \\"4\\" 4)]\\n        \:pistol-stunna (frame \\"5\\" 5))" "(defn frames [& args]\\r\\n        (let [mapped (map (fn [name-frame]\\r\\n                            {(first name-frame) (let [second-item (second name-frame)]\\n                                                  (if (vector? second-item) second-item (vector second-item)))})\\r\\n                          (partition 2 args))]\\r\\n        (reduce conj mapped)))" "(use 'basic-combat-ai.components \:reload)"]
eclipse.preferences.version=1
